# *********************************************
# ======================================================================

#-----------------------------------------------
# Configurações Gerais
#-----------------------------------------------

# Se não estiver rodando interativamente, não fazer nada
[ -z "$PS1" ] && return

# Não armazenar as linhas duplicadas ou linhas que começam com espaço no historico
HISTCONTROL=ignoreboth

# Adicionar ao Historico e não substitui-lo
shopt -s histappend

# Definições do comprimento e tamnho do historico.
HISTSIZE=1000
HISTFILESIZE=2000
# ignoreboth="ignoredups:ignorespace", erasedups=remove comandos duplicados
HISTCONTROL=ignoreboth:erasedups
# expressões regulares de comandos a serem ignorados
HISTIGNORE="history:pwd:ls:l:ll:la:[bf]g:exit"

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

if [ -x /usr/bin/mint-fortune ]; then
     /usr/bin/mint-fortune
fi

export PATH=$PATH:/usr/local/bin:/usr/local/sbin
export TERM='xterm-256color'
export PATH="${HOME}.composer/vendor/bin:$PATH"
export LC_CTYPE="en_US.UTF-8"
export LC_TIME="en_US.UTF-8"
export LANG="en_US.UTF-8"
export LANGUAGE="en_US.UTF-8"
export LC_CTYPE="en_US.UTF-8"
export LC_NUMERIC="en_US.UTF-8"
export LC_TIME="en_US.UTF-8"
export LC_COLLATE="en_US.UTF-8"
export LC_MONETARY="en_US.UTF-8"
export LC_MESSAGES="en_US.UTF-8"
export LC_PAPER="en_US.UTF-8"
export LC_NAME="en_US.UTF-8"
export LC_ADDRESS="en_US.UTF-8"
export LC_TELEPHONE="en_US.UTF-8"
export LC_MEASUREMENT="en_US.UTF-8"
export LC_IDENTIFICATION="en_US.UTF-8"
export SHELL=/bin/bash
export EDITOR=vim
export PATH="$PATH:${HOME}.sonar/sonar-scanner/bin"

#===========================================
# Váriavies com as Cores
#===========================================
NONE="\[\033[0m\]" # Eliminar as Cores, deixar padrão)

## Cores de Fonte
K="\[\033[0;30m\]" # Black (Preto)
R="\[\033[0;31m\]" # Red (Vermelho)
G="\[\033[0;32m\]" # Green (Verde)
Y="\[\033[0;33m\]" # Yellow (Amarelo)
B="\[\033[0;34m\]" # Blue (Azul)
M="\[\033[0;35m\]" # Magenta (Vermelho Claro)
C="\[\033[0;36m\]" # Cyan (Ciano - Azul Claro)
W="\[\033[0;37m\]" # White (Branco)

## Efeito Negrito (bold) e cores
BK="\[\033[1;30m\]" # Bold+Black (Negrito+Preto)
BR="\[\033[1;31m\]" # Bold+Red (Negrito+Vermelho)
BG="\[\033[1;32m\]" # Bold+Green (Negrito+Verde)
BY="\[\033[1;33m\]" # Bold+Yellow (Negrito+Amarelo)
BB="\[\033[1;34m\]" # Bold+Blue (Negrito+Azul)
BM="\[\033[1;35m\]" # Bold+Magenta (Negrito+Vermelho Claro)
BC="\[\033[1;36m\]" # Bold+Cyan (Negrito+Ciano - Azul Claro)
BW="\[\033[1;37m\]" # Bold+White (Negrito+Branco)

## Cores de fundo (backgroud)
BGK="\[\033[40m\]" # Black (Preto)
BGR="\[\033[41m\]" # Red (Vermelho)
BGG="\[\033[42m\]" # Green (Verde)
BGY="\[\033[43m\]" # Yellow (Amarelo)
BGB="\[\033[44m\]" # Blue (Azul)
BGM="\[\033[45m\]" # Magenta (Vermelho Claro)
BGC="\[\033[46m\]" # Cyan (Ciano - Azul Claro)
BGW="\[\033[47m\]" # White (Branco)

#GIT
function git_branch_name() {
  git branch 2>/dev/null | grep -e '^*' | sed -E 's/^\* (.+)$/(\1) /'
}
#=============================================
# Configurações referentes ao usuário
#=============================================

## Verifica se é usuário root (UUID=0) ou usuário comum
if [ $UID -eq "0" ]; then

## Cores e efeitos do Usuario root

PS1="$G┌─[$BY SF CLI $G] $G[ \u $(date +%k:%M:%S) ]$B:\w\n$G└──>$BR \\$ $NONE"

else

## Cores e efeitos do usuário comum

PS1="$BG┌─[$BY SF CLI $BY$BG]$BG[$BG$BB \u$BB$BM(\$(id -u))$BM$BB$(date +%k:%M:%S) $BB$BG]$BG$BG[$BG$BC \w $BC$BG]$BG\n$BG└─~>\$(git_branch_name)>$BG $NONE"

fi # Fim da condição if

## Exemplos de PS1

# PS1="\e[01;31m┌─[\e[01;35m\u\e[01;31m]──[\e[00;37m${HOSTNAME%%.*}\e[01;32m]:\w$\e[01;31m\n\e[01;31m└──\e[01;36m>>\e[00m"

# PS1='\[\e[m\n\e[1;30m\][$:$PPID \j:\!\[\e[1;30m\]]\[\e[0;36m\] \T \d \[\e[1;30m\][\[\e[1;34m\]\u@\H\[\e[1;30m\]:\[\e[0;37m\]${SSH_TTY} \[\e[0;32m\]+${SHLVL}\[\e[1;30m\]] \[\e[1;37m\]\w\[\e[0;37m\] \n($SHLVL:\!)\$ '}

# PS1="\e[01;31m┌─[\e[01;35m\u\e[01;31m]──[\e[00;37m${HOSTNAME%%.*}\e[01;32m]:\w$\e[01;31m\n\e[01;31m└──\e[01;36m>>\e[00m"

# PS1="┌─[\[\e[34m\]\h\[\e[0m\]][\[\e[32m\]\w\[\e[0m\]]\n└─╼ "

# PS1='[\u@\h \W]\$ '

#==========================
# DIVERSOS
#==========================

## Habilitando suporte a cores para o ls e outros aliases
## Vê se o arquivo existe
if [ -x /usr/bin/dircolors ]; then
test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"

## Aliases (apelidos) para comandos
alias ls='ls --color=auto'
alias dir='dir --color=auto'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
fi # Fim do if do dircolor

alias "sf"="php ${SYMFONY_SERVER_APP_PATH}/bin/console"
alias "sf-cc-all"="sf cache:clear"
alias "sf-cc-all-force"="sf cache:clear --no-warmup"
alias "sf-router"="sf debug:router"
alias "sf-container"="sf debug:container"
# Symfony aliases
## Cache
alias sf-cache-clear="sf cache:clear"                         # Clears the cache
alias sf-cache-warmup="sf cache:warmup"                       # Warms up an empty cache

## Doctrine
alias sf-doctrine-cm="sf doctrine:cache:clear-metadata"         # Clears all metadata cache for a entity manager
alias sf-doctrine-ccq="sf doctrine:cache:clear-query"            # Clears all query cache for a entity manager
alias sf-doctrine-cr="sf doctrine:cache:clear-result"           # Clears result cache for a entity manager
alias sf-doctrine-dc="sf doctrine:database:create"              # Creates the configured databases
alias sf-doctrine-dd="sf doctrine:database:drop"                # Drops the configured databases
alias sf-doctrine-eps="sf doctrine:ensure-production-settings"   # Verify that Doctrine is properly configured for a production environment.
alias sf-doctrine-gc="sf doctrine:generate:crud"                # Generates a CRUD based on a Doctrine entity
alias sf-doctrine-ges="sf doctrine:generate:entities"            # Generates entity classes and method stubs from your mapping information
alias sf-doctrine-ge="sf doctrine:generate:entity"              # Generates a new Doctrine entity inside a bundle
alias sf-doctrine-gf="sf doctrine:generate:form"                # Generates a form type class based on a Doctrine entity
alias sf-doctrine-mc="sf doctrine:mapping:convert"              # Convert mapping information between supported formats.
alias sf-doctrine-mi="sf doctrine:mapping:import"               # Imports mapping information from an existing database
alias sf-doctrine-m-info="sf doctrine:mapping:info"                 # Shows basic information about all mapped entities
alias sf-doctrine-qd="sf doctrine:query:dql"                    # Executes arbitrary DQL directly from the command line.
alias sf-doctrine-qs="sf doctrine:query:sql"                    # Executes arbitrary SQL directly from the command line.
alias sf-doctrine-sc="sf doctrine:schema:create"                # Executes (or dumps) the SQL needed to generate the database schema
alias sf-doctrine-sd="sf doctrine:schema:drop"                  # Executes (or dumps) the SQL needed to drop the current database schema
alias sf-doctrine-su="sf doctrine:schema:update"                # Executes (or dumps) the SQL needed to update the database schema to match the current mapping metadata

## Generate
alias sf-gen-bundle="sf generate:bundle"                       # Generates a bundle
alias sf-gen-doctrine-crud="sf generate:doctrine:crud"         # Generates a CRUD based on a Doctrine entity
alias sf-gen-doctrine-entities="sf generate:doctrine:entities" # Generates entity classes and method stubs from your mapping information
alias sf-gen-doctrine-entity="sf generate:doctrine:entity"     # Generates a new Doctrine entity inside a bundle
alias sf-gen-doctrine-form="sf generate:doctrine:form"         # Generates a form type class based on a Doctrine entity

alias sf-reload-db='sf-doctrine-dd --force && sf-doctrine-dc && sf-doctrine-su --force'
alias sf-reload-test-db='sf-doctrine-dd --force && sf-doctrine-dc && sf-doctrine-su --force'
alias sf-load-fixtures='sf hautelook_alice:doctrine:fixtures:load -n'
alias sf-reload-all='sf-cc-all && sf-reload-db && sf-load-fixtures'
alias sf-test-reload-all='sf-cc-all --env=test && sf-reload-test-db && sf-load-fixtures --env=test'
# End Symfony aliases
